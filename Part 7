//detector.hh

//detector.hh

#ifndef DETECTOR_HH
#define DETECTOR_HH

#include "G4VSensitiveDetector.hh"
#include "G4RunManager.hh"
#include "G4SystemOfUnits.hh"

//#include "g4root.hh"

class MySensitiveDetector : public G4VSensitiveDetector
{
public:
    MySensitiveDetector(G4String);
    ~MySensitiveDetector();
    
private:
    virtual G4bool ProcessHits(G4Step *, G4TouchableHistory *);
    
   // G4PhysicsOrderedFreeVector *quEff;
};

#endif












//detector.cc



#include "detector.hh"

MySensitiveDetector::MySensitiveDetector(G4String name) : G4VSensitiveDetector(name)
{
    /*quEff = new G4PhysicsOrderedFreeVector();

    std::ifstream datafile;
    datafile.open("eff.dat");

    while(1)
    {
        G4double wlen, queff;

        datafile >> wlen >> queff;

        if(datafile.eof())
            break;

        G4cout << wlen << " " << queff << std::endl;

        quEff->InsertValues(wlen, queff/100.);*/
    }

//    datafile.close();

//    quEff->SetSpline(false);}

MySensitiveDetector::~MySensitiveDetector()
{}

G4bool MySensitiveDetector::ProcessHits(G4Step *aStep, G4TouchableHistory *ROhist)


{
   G4Track *track = aStep->GetTrack();

    track->SetTrackStatus(fStopAndKill); //when photon hits the detector it kills photon's trajectory

    G4StepPoint *preStepPoint = aStep->GetPreStepPoint();   //photon's start point
    G4StepPoint *postStepPoint = aStep->GetPostStepPoint(); //photon's end point

    G4ThreeVector posPhoton = preStepPoint->GetPosition();
   /* G4ThreeVector momPhoton = preStepPoint->GetMomentum();

    G4double time = preStepPoint->GetGlobalTime();

    G4double wlen = (1.239841939*eV/momPhoton.mag())*1E+03;*/

   // G4cout << "Photon position: " << posPhoton << G4endl;
    
    
    
    
    

  const G4VTouchable *touchable = aStep->GetPreStepPoint()->GetTouchable();

    G4int copyNo = touchable->GetCopyNumber();

    G4cout << "Copy number: " << copyNo << G4endl;

    G4VPhysicalVolume *physVol = touchable->GetVolume();
    G4ThreeVector posDetector = physVol->GetTranslation();

   // #ifndef G4MULTITHREADED
        G4cout << "Detector position: " << posDetector << G4endl;
        G4cout << "Photon wavelength: " << wcslen << G4endl;
    
    
    /*#endif

    G4int evt = G4RunManager::GetRunManager()->GetCurrentEvent()->GetEventID();

    G4AnalysisManager *man = G4AnalysisManager::Instance();

    man->FillNtupleIColumn(0, 0, evt);
    man->FillNtupleDColumn(0, 1, posPhoton[0]);
    man->FillNtupleDColumn(0, 2, posPhoton[1]);
    man->FillNtupleDColumn(0, 3, posPhoton[2]);
    man->FillNtupleDColumn(0, 4, time);
    man->FillNtupleDColumn(0, 5, wlen);
    man->AddNtupleRow(0);

    if(G4UniformRand() < quEff->Value(wlen))
    {
        man->FillNtupleIColumn(1, 0, evt);
        man->FillNtupleDColumn(1, 1, posDetector[0]);
        man->FillNtupleDColumn(1, 2, posDetector[1]);
        man->FillNtupleDColumn(1, 3, posDetector[2]);
        man->AddNtupleRow(1);
    }
*/
    //return true;
}















//construction.cc

#include  "construction.hh"

 MyDetectorConstruction::MyDetectorConstruction()
 {}
 
  MyDetectorConstruction::~MyDetectorConstruction()
  {}
   G4VPhysicalVolume *MyDetectorConstruction::Construct()
   {
   
   G4NistManager *nist = G4NistManager::Instance();
   
   G4Material *SiO2 =new G4Material ("SiO2", 2.201*g/cm3,2);
   SiO2->AddElement(nist->FindOrBuildElement("Si"),1);
   SiO2->AddElement(nist->FindOrBuildElement("O"),2);
   
   G4Material *H2O =new G4Material ("H2O", 1.000*g/cm3,2);
   H2O->AddElement(nist->FindOrBuildElement("H"),2);
   H2O->AddElement(nist->FindOrBuildElement("O"),1);
   
   G4Element *C = nist->FindOrBuildElement("C");
   
   G4Material *Aerogel = new G4Material("Aerogel",0.200*g/cm3,3);
   Aerogel -> AddMaterial(SiO2,62.5*perCent);
   Aerogel-> AddMaterial(H2O,37.4*perCent);
   Aerogel-> AddElement(C,0.1*perCent);
   
   G4double energy[2] = {1.239841939*eV/0.2 ,1.239841939*eV/0.9};
   G4double rindexAerogel[2]={1.1,1.1};
    G4double rindexWorld[2]={1.0,1.0};
   
   
   
   G4MaterialPropertiesTable *mptAerogel =new G4MaterialPropertiesTable();
   mptAerogel->AddProperty("RINDEX",energy,rindexAerogel,2);
   
   
   
   
   Aerogel->SetMaterialPropertiesTable(mptAerogel);
   
   G4Material *worldMat= nist->FindOrBuildMaterial("G4_AIR");
   
   G4MaterialPropertiesTable *mptWorld= new G4MaterialPropertiesTable();
   mptWorld->AddProperty("RINDEX",energy,rindexWorld, 2);
   
   
   worldMat->SetMaterialPropertiesTable(mptWorld);
   
   
   
   
   
   
    
   G4Box *solidworld=new G4Box("solidworld",0.5*m,0.5*m,0.5*m);
   
   G4LogicalVolume *logicworld=new G4LogicalVolume(solidworld,worldMat,"logicWorld");
   
   G4VPhysicalVolume *physWorld= new G4PVPlacement(0, G4ThreeVector(0.,0.,0.),logicworld,"physworld",0,false,0,true);
   
   G4Box *solidRadiator =new G4Box ("solidRadiator", 0.4*m ,0.4*m, 0.01*m);
   
   G4LogicalVolume *logicRadiator =new G4LogicalVolume(solidRadiator,Aerogel, "logicalRadiator");
   
   G4VPhysicalVolume *physRadiator= new G4PVPlacement(0, G4ThreeVector(0.,0.,0.25*m),logicRadiator,"physRadiator",logicworld,false,0,true);
   
   
   G4Box *solidDetector =new G4Box("solidDetector",0.005*m,0.005*m,0.01*m); //solid detector define
   
   
   logicDetector =new G4LogicalVolume(solidDetector, worldMat , "logicDetector");
   
   
   for (G4int i=0;i<100;i++)
   {
   for(G4int j = 0; j<100;j++)
   
   {
   G4VPhysicalVolume *phyDetector=new G4PVPlacement(0, G4ThreeVector(-0.5*m+(i+0.5)*m/100,-0.5*m+(j+0.5)*m/100,0.49*m),logicDetector,"physDetector",logicworld,false,j+i*100,true);
   
   }
   
   
   
   }
   
   
   
   
   return physWorld;
   
   }
   
   void MyDetectorConstruction::ConstructSDandField()
   {
   MySensitiveDetector *sensDet=new MySensitiveDetector("SensitiveDetector");
   
   logicDetector->SetSensitiveDetector(sensDet);
   
   }












//sim.cc



#include <iostream>

#include "G4RunManager.hh"
#include "G4UImanager.hh"
#include "G4VisManager.hh"
#include "G4VisExecutive.hh"
#include "G4UIExecutive.hh"
#include "construction.cc"
#include "physics.cc"
#include "action.cc"
 #include "generator.cc"
 #include "detector.cc"


int  main(int argc, char** argv)

{ G4RunManager *runManager = new G4RunManager();
runManager->SetUserInitialization(new MyDetectorConstruction());
runManager->SetUserInitialization(new MyPhysicsList());
runManager->SetUserInitialization(new MyActionInitialization());









runManager->Initialize();

 G4UIExecutive *ui = new G4UIExecutive(argc, argv);

G4VisManager *vismanager =new G4VisExecutive ();
vismanager->Initialize();

G4UImanager *UImanager = G4UImanager::GetUIpointer();

UImanager->ApplyCommand("/vis/open OGL");
UImanager->ApplyCommand("/vis/viewer/set/viewpointVector 1 1 1"); 
UImanager->ApplyCommand("/vis/drawVolume");
UImanager->ApplyCommand("/vis/viewer/set/autoRefresh true"); 
UImanager->ApplyCommand("/vis/scene/add/trajectories smooth");
UImanager->ApplyCommand("/vis/scene/endOfEventAction accumulate 10"); 
ui->SessionStart();

return 0;

}





//construction.hh


#ifndef CONSTRUCTION_HH
#define CONSTRUCTION_HH

#include "G4VUserDetectorConstruction.hh"
#include "G4VPhysicalVolume.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4PVPlacement.hh"
#include "G4NistManager.hh"
#include "G4SystemOfUnits.hh"

#include "detector.hh"

class MyDetectorConstruction : public G4VUserDetectorConstruction

{
public:
        MyDetectorConstruction();
        ~MyDetectorConstruction();
        
        virtual G4VPhysicalVolume *Construct();
        
        
        
private:

G4LogicalVolume *logicDetector;
virtual void ConstructSDandField();
        
        };   
        
#endif         




//physics.hh


#ifndef PHYSICS_HH
#define PHYSICS_HH

#include "G4VModularPhysicsList.hh"
#include "G4EmStandardPhysics.hh"
#include "G4OpticalPhysics.hh"
//#include "G4RadioactiveDecayPhysics.hh"
//#include "G4DecayPhysics.hh"

class MyPhysicsList : public G4VModularPhysicsList
{
public:
    MyPhysicsList();
    ~MyPhysicsList();
};

#endif










