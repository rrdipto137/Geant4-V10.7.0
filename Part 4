//physics.cc




#include "physics.hh"

MyPhysicsList::MyPhysicsList()
{
    RegisterPhysics (new G4EmStandardPhysics());
    RegisterPhysics (new G4OpticalPhysics());
    //RegisterPhysics(new G4DecayPhysics());
    //RegisterPhysics(new G4RadioactiveDecayPhysics());
}

MyPhysicsList::~MyPhysicsList()
{}




//physics.hh


#ifndef PHYSICS_HH
#define PHYSICS_HH

#include "G4VModularPhysicsList.hh"
#include "G4EmStandardPhysics.hh"
#include "G4OpticalPhysics.hh"
//#include "G4RadioactiveDecayPhysics.hh"
//#include "G4DecayPhysics.hh"

class MyPhysicsList : public G4VModularPhysicsList
{
public:
    MyPhysicsList();
    ~MyPhysicsList();
};

#endif



//sim.cc


#include <iostream>

#include "G4RunManager.hh"
#include "G4UImanager.hh"
#include "G4VisManager.hh"
#include "G4VisExecutive.hh"
#include "G4UIExecutive.hh"
#include "construction.cc"
#include "physics.cc"
int  main(int argc, char** argv)

{ G4RunManager *runManager = new G4RunManager();
runManager->SetUserInitialization(new MyDetectorConstruction());
runManager->SetUserInitialization(new MyPhysicsList());
runManager->Initialize();
 G4UIExecutive *ui = new G4UIExecutive(argc, argv);

G4VisManager *vismanager =new G4VisExecutive ();
vismanager->Initialize();

G4UImanager *UImanager = G4UImanager::GetUIpointer();

UImanager->Applycommand("/vis/open OGL");           ----------------------->//for visualization
UImanager->Applycommand("/vis/viewer/set/viewpointVector 1 1 1"); 
UImanager->Applycommand("/vis/drawVolume");     ------------------->// drawing mother volume
ui->SessionStart();

return 0;

}
